#include <stdio.h>
int main()
{
  char killer = 0;
  for (killer = 'a'; killer <= 'd'; killer++)
  {
    if ((killer != 'a') + (killer == 'c') + (killer == 'd') + (killer != 'd') == 3)
    {
      printf("%c", killer);
    }
  }
  return 0;
}
// #include <stdio.h>
// int main()
// {
//   int i = 0;
//   int arr[10] = {1};
//   for (i = 0; i < 10; i++)
//   {
//     int j = 0;
//     arr[i] = 1;
//     for (j = i - 1; j >= 0; j--)
//     {
//       arr[j] = arr[j - 1] + arr[j];
//     }
//     for (j = 0; j <= i; j++)
//     {
//       printf("%3d ", arr[j]);
//     }
//     printf("\n");
//   }
//   return 0;
// }
// #include <stdio.h>
// void move(int arr[], int len)
// {
//   int i = 0;
//   for (i = 0; i < len / 2 - 1; i++)
//   {
//     int j = 0;
//     for (j = 0; j < len - 1; j++)
//     {
//       if (arr[j] % 2 == 0 && arr[j + 1] % 2 == 1)
//       {
//         int tmp = arr[j];
//         arr[j] = arr[j + 1];
//         arr[j + 1] = tmp;
//       }
//     }
//   }
// }
// int main()
// {
//   int arr[] = {1, 2, 3, 4, 6, 5, 7, 8, 9, 10};
//   int sz = sizeof(arr) / sizeof(arr[0]);
//   move(arr, sz);
//   int i = 0;
//   for (i = 0; i < 10; i++)
//   {
//     printf("%d ", arr[i]);
//   }
//   return 0;
// }
// #include <stdio.h>
// int my_strlen(char *a)
// {
//   int num = 0;
//   while (*a != '\0')
//   {
//     num++;
//     a++;
//   }
//   return num;
// }
// int main()
// {
//   char arr[10] = "hello bit";
//   printf("%d", my_strlen(arr));
//   return 0;
// }
// #include <stdio.h>
// int main()
// {
//   int cs = 0;
//   scanf("%d", &cs);
//   int sum = cs;
//   int kp = cs;
//   while (kp >= 2)
//   {
//     sum += kp / 2;
//     kp = kp / 2 + kp % 2;
//   }
//   printf("%d", sum);
//   return 0;
// }
// #include <stdio.h>
// int main()
// {
//   int i = 0;
//   int line = 0;
//   scanf("%d", &line);
//   for (i = 1; i <= line; i++)
//   {
//     int j;
//     // 打印上半部分
//     if (i <= line / 2)
//     {
//       for (j = 0; j < line / 2 + 1 - i; j++)
//         printf(" ");
//       for (j = 0; j < 2 * i - 1; j++)
//       {
//         printf("*");
//       }
//       printf("\n");
//     }
//     // 打印下半部分
//     else
//     {
//       for (j = 1; j < i - line / 2; j++)
//       {
//         printf(" ");
//       }
//       for (j = 0; j < 2 * (line - i) + 1; j++)
//         printf("*");
//       printf("\n");
//     }
//   }
//   return 0;
// }
// #include <stdio.h>
// int cif(int a, int b)
// {
//   int i = 0;
//   int c = 1;
//   for (i = 0; i < b; i++)
//   {
//     c *= a;
//   }
//   return c;
// }
// int main()
// {
//   int i = 0;
//   for (i = 1; i < 100000; i++)
//   {
//     //计算位数
//     int num = 0;
//     if (i / 10000)
//       num = 5;
//     else if (i / 1000)
//       num = 4;
//     else if (i / 100)
//       num = 3;
//     else if (i / 10)
//       num = 2;
//     else
//       num = 1;
//     if (cif(i % 10, num) + cif(i / 10 % 10, num) + cif(i / 100 % 10, num) + cif(i / 1000 % 10, num) + cif(i / 10000 % 10, num) == i)
//       printf("%d ", i);
//   }
//   return 0;
// }
// #include <stdio.h>
// int main()
// {
//   int a = 0;
//   int n = 0;
//   scanf("%d%d", &a, &n);
//   int sum = 0;
//   int i = 0;
//   int ret = 0;
//   for (i = 0; i < n; i++)
//   {
//     ret = ret * 10 + 2;
//     sum += ret;
//   }
//   printf("%d", sum);
//   return 0;
// }
// #include <stdio.h>
// #include <string.h>
// int main()
// {
//   char arr[20] = {0};
//   gets(arr);
//   int left = 0;
//   int right = strlen(arr) - 1;
//   while (left < right)
//   {
//     char tmp = arr[left];
//     arr[left] = arr[right];
//     arr[right] = tmp;
//     left++;
//     right--;
//   }
//   puts(arr);
//   return 0;
// }
// #include <stdio.h>
// int main()
// {
//   int a[4] = {1, 2, 3, 4};
//   int *ptr2 = (int *)((int)a + 1);
//   printf("%x\n", *ptr2);
//   printf("%x\n", *(a + 1));
//   return 0;
// }
// #include <stdio.h>
// struct Test
// {
//   int num;
//   char *pcname;
//   short sdate;
//   char cha[2];
//   short sba[4];
// } *p;
// int main()
// {
//   printf("%p\n", p + 0x1);
//   printf("%p\n", (unsigned long)p + 0x1);
//   printf("%p\n", (unsigned int *)p + 0x1);
//   return 0;
// }
