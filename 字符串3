#include <stdio.h>
#include <memory.h>
// 模拟memcmp函数
int my_memcmp(const void *arr1, const void *arr2, unsigned int sz)
{
  while (sz--)
  {
    if (*(char *)arr1 != *(char *)arr2)
      return *(char *)arr1 - *(char *)arr2;
    arr1++;
    arr2++;
  }
  return 0;
}
int main()
{
  int arr1[] = {1, 2, 3, 4, 5};
  int arr2[] = {1, 2, 5, 3, 4};
  if (!my_memcmp(arr1, arr2, 8))
    printf("相同\n");
  else
    printf("不同\n");
  return 0;
}
// #include <stdio.h>
// #include <memory.h>
// #include <string.h>
// #include <assert.h>
// // 模拟memmove函数
// void *my_memmove(void *des, const void *str, unsigned int a)
// {
//   assert(des != NULL && str != NULL);
//   void *ret = des;
//   if (des < str || des > str + a) // 从前往后
//   {
//     while (a--)
//       *(char *)(des++) = *(char *)(str++);
//   }
//   else // 从后往前
//   {
//     while (a--)
//     {
//       *(char *)(des + a) = *(char *)(str + a);
//     }
//   }
//   return ret;
// }
// int main()
// {
//   int arr1[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
//   my_memmove(arr1 + 2, arr1, 20);
//   int i = 0;
//   for (i = 0; i < 10; i++)
//     printf("%d ", arr1[i]);
//   return 0;
// }
